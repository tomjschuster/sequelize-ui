// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework generates the correct code for options-camel-singular 1`] = `

/******************************************************************************
 *                             /sakila/.gitignore                             *
 ******************************************************************************/

node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp


/******************************************************************************
 *                               /sakila/db.ts                                *
 ******************************************************************************/

import { Sequelize, Options } from 'sequelize'
import configs from './config/config.js'

const env = process.env.NODE_ENV || 'development'
const config = (configs as {[key: string]: Options})[env]

const db: Sequelize = new Sequelize({
  ...config,
  define: {
    freezeTableName: true
  }
})

export default db


/******************************************************************************
 *                            /sakila/package.json                            *
 ******************************************************************************/

{
  "name": "sakila",
  "version": "0.0.1",
  "description": "",
  "main": "server.ts",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "db:up": "echo creating && npm run db:create && echo created && npm run db:migrate && echo migrated",
    "db:reset": "npm run db:drop && npm run db:up",
    "db:create": "sequelize db:create",
    "db:drop": "[[ $NODE_ENV == production ]] && exit 1 || sequelize db:drop",
    "db:migrate": "sequelize db:migrate",
    "db:rollback": "sequelize db:migrate:undo",
    "db:rollback:all": "sequelize db:migrate:undo:all",
    "build": "tsc",
    "start": "node ./dist/server.js",
    "dev": "tsc-watch --onSuccess \\"node ./dist/server.js\\""
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "pg": "^8.7.3",
    "pg-hstore": "^2.3.4",
    "sequelize": "^6.16.2"
  },
  "devDependencies": {
    "@types/node": "^16.11.7",
    "@types/validator": "^13.7.1",
    "sequelize-cli": "^6.4.1",
    "tsc-watch": "^4.6.0",
    "typescript": "^4.5.5"
  }
}



/******************************************************************************
 *                             /sakila/README.md                              *
 ******************************************************************************/

# sakila
This project was generated with [Sequelize UI](https://github.com/tomjschuster/sequelize-ui). The project is a simple [Node.js](https://nodejs.dev/) server with [Sequelize ORM](https://sequelize.org/).

Be sure to test all code for correctness and to test database migrations in a test environment before deploying to production.

## Running Project

### Prerequesites
- [Node.js](https://nodejs.dev/)
- [PostgreSQL](https://www.postgresql.org/)

### Setup
1. Install dependencies: \`npm install\`
2. Setup database: \`npm run db:up\`

### Run
- Local development: \`npm run dev\`
- Production build: \`npm run build && npm start\`

## Bug Reports
Please report any bugs with generated code at [Sequelize UI Issues](https://github.com/tomjschuster/sequelize-ui/issues).


/******************************************************************************
 *                             /sakila/server.ts                              *
 ******************************************************************************/

import http from 'http'
import db from './db'
import { initModels } from './models'

async function run() {
  initModels(db)
  const hostname = process.env.HOSTNAME || '127.0.0.1'
  const port = parseInt(process.env.PORT || '3000')
  
  const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World')
  })
  
  server.listen(port, hostname, () => {
    console.log(\`Server running at http://\${hostname}:\${port}/\`)
  })
}

run()

/******************************************************************************
 *                           /sakila/tsconfig.json                            *
 ******************************************************************************/

{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "dist",
    "strict": true,
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowJs": true,
    "forceConsistentCasingInFileNames": true
  }
}


/******************************************************************************
 *                          /sakila/config/config.js                          *
 ******************************************************************************/

module.exports = {
  development: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'sakila',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  test: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'sakila',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  production: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME,
    username: process.env.POSTGRES_DB_USERNAME,
    password: process.env.POSTGRES_DB_PASSWORD,
    host: process.env.POSTGRES_DB_HOST,
    port: parseInt(process.env.POSTGRES_DB_PORT)
  }
}

/******************************************************************************
 *             /sakila/migrations/20200101000000-create-Actor.js              *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Actor', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        field: 'firstName',
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        field: 'lastName',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Actor');
  },
};

/******************************************************************************
 *              /sakila/migrations/20200101000010-create-Film.js              *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Film', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        field: 'title',
        allowNull: false
      },
      description: {
        type: DataTypes.STRING,
        field: 'description'
      },
      releaseYear: {
        type: DataTypes.INTEGER,
        field: 'releaseYear'
      },
      languageId: {
        type: DataTypes.INTEGER,
        field: 'languageId',
        allowNull: false
      },
      originalLanguageId: {
        type: DataTypes.INTEGER,
        field: 'originalLanguageId'
      },
      rentalDuration: {
        type: DataTypes.INTEGER,
        field: 'rentalDuration',
        allowNull: false
      },
      rentalRate: {
        type: DataTypes.DECIMAL,
        field: 'rentalRate',
        allowNull: false
      },
      length: {
        type: DataTypes.INTEGER,
        field: 'length'
      },
      rating: {
        type: DataTypes.ENUM('G', 'PG', 'PG-13', 'R', 'NC-17'),
        field: 'rating',
        allowNull: false
      },
      specialFeature: {
        type: DataTypes.ARRAY(DataTypes.ENUM('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes')),
        field: 'specialFeature',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Film');
  },
};

/******************************************************************************
 *            /sakila/migrations/20200101000020-create-Language.js            *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Language', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      name: {
        type: DataTypes.STRING,
        field: 'name',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Language');
  },
};

/******************************************************************************
 *            /sakila/migrations/20200101000030-create-Category.js            *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Category', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Category');
  },
};

/******************************************************************************
 *           /sakila/migrations/20200101000040-create-Inventory.js            *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Inventory', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      filmId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'filmId'
      },
      storeId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'storeId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Inventory');
  },
};

/******************************************************************************
 *             /sakila/migrations/20200101000050-create-Store.js              *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Store', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      managerStaffId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'managerStaffId'
      },
      addressId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'addressId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Store');
  },
};

/******************************************************************************
 *             /sakila/migrations/20200101000100-create-Staff.js              *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Staff', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        field: 'firstName',
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        field: 'lastName',
        allowNull: false
      },
      picture: {
        type: DataTypes.BLOB,
        field: 'picture'
      },
      email: {
        type: DataTypes.STRING,
        field: 'email'
      },
      active: {
        type: DataTypes.BOOLEAN,
        field: 'active',
        allowNull: false
      },
      username: {
        type: DataTypes.STRING,
        field: 'username',
        allowNull: false
      },
      password: {
        type: DataTypes.STRING,
        field: 'password'
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      storeId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'storeId'
      },
      addressId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'addressId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Staff');
  },
};

/******************************************************************************
 *            /sakila/migrations/20200101000110-create-Customer.js            *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Customer', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        field: 'firstName',
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        field: 'lastName',
        allowNull: false
      },
      email: {
        type: DataTypes.STRING,
        field: 'email'
      },
      active: {
        type: DataTypes.BOOLEAN,
        field: 'active',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      storeId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'storeId'
      },
      addressId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'addressId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Customer');
  },
};

/******************************************************************************
 *            /sakila/migrations/20200101000120-create-Address.js             *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Address', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      address: {
        type: DataTypes.STRING,
        field: 'address',
        allowNull: false
      },
      address2: {
        type: DataTypes.STRING,
        field: 'address2',
        allowNull: false
      },
      postalCode: {
        type: DataTypes.STRING,
        field: 'postalCode'
      },
      phone: {
        type: DataTypes.STRING,
        field: 'phone',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      cityId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'cityId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Address');
  },
};

/******************************************************************************
 *             /sakila/migrations/20200101000130-create-Rental.js             *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Rental', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      rentalDate: {
        type: DataTypes.DATEONLY,
        field: 'rentalDate',
        allowNull: false
      },
      returnDate: {
        type: DataTypes.STRING,
        field: 'returnDate'
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      inventoryId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'inventoryId'
      },
      customerId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'customerId'
      },
      staffId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'staffId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Rental');
  },
};

/******************************************************************************
 *            /sakila/migrations/20200101000140-create-Payment.js             *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Payment', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      amount: {
        type: DataTypes.DECIMAL,
        field: 'amount',
        allowNull: false
      },
      paymentDate: {
        type: DataTypes.DATE,
        field: 'paymentDate',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      customerId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'customerId'
      },
      staffId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'staffId'
      },
      rentalId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'rentalId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Payment');
  },
};

/******************************************************************************
 *              /sakila/migrations/20200101000150-create-City.js              *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('City', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      city: {
        type: DataTypes.STRING,
        field: 'city',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      countryId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'countryId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('City');
  },
};

/******************************************************************************
 *            /sakila/migrations/20200101000200-create-Country.js             *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Country', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      country: {
        type: DataTypes.STRING,
        field: 'country',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Country');
  },
};

/******************************************************************************
 *           /sakila/migrations/20200101000210-create-FilmActor.js            *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('FilmActor', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      filmId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'filmId'
      },
      actorId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'actorId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('FilmActor');
  },
};

/******************************************************************************
 *          /sakila/migrations/20200101000220-create-FilmCategory.js          *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('FilmCategory', {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'id',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      filmId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'filmId'
      },
      categoryId: {
        type: DataTypes.INTEGER.UNSIGNED,
        field: 'categoryId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('FilmCategory');
  },
};

/******************************************************************************
 *           /sakila/migrations/20200101000230-add-foreign-keys.js            *
 ******************************************************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addConstraint('Film', {
      fields: ['languageId'],
      type: 'foreign key',
      name: 'Film_languageId_fkey',
      references: {
        table: 'Language',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Film', {
      fields: ['originalLanguageId'],
      type: 'foreign key',
      name: 'Film_originalLanguageId_fkey',
      references: {
        table: 'Language',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Inventory', {
      fields: ['filmId'],
      type: 'foreign key',
      name: 'Inventory_filmId_fkey',
      references: {
        table: 'Film',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Inventory', {
      fields: ['storeId'],
      type: 'foreign key',
      name: 'Inventory_storeId_fkey',
      references: {
        table: 'Store',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Store', {
      fields: ['managerStaffId'],
      type: 'foreign key',
      name: 'Store_managerStaffId_fkey',
      references: {
        table: 'Staff',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Store', {
      fields: ['addressId'],
      type: 'foreign key',
      name: 'Store_addressId_fkey',
      references: {
        table: 'Address',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Staff', {
      fields: ['storeId'],
      type: 'foreign key',
      name: 'Staff_storeId_fkey',
      references: {
        table: 'Store',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Staff', {
      fields: ['addressId'],
      type: 'foreign key',
      name: 'Staff_addressId_fkey',
      references: {
        table: 'Address',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Customer', {
      fields: ['storeId'],
      type: 'foreign key',
      name: 'Customer_storeId_fkey',
      references: {
        table: 'Store',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Customer', {
      fields: ['addressId'],
      type: 'foreign key',
      name: 'Customer_addressId_fkey',
      references: {
        table: 'Address',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Address', {
      fields: ['cityId'],
      type: 'foreign key',
      name: 'Address_cityId_fkey',
      references: {
        table: 'City',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Rental', {
      fields: ['inventoryId'],
      type: 'foreign key',
      name: 'Rental_inventoryId_fkey',
      references: {
        table: 'Inventory',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Rental', {
      fields: ['customerId'],
      type: 'foreign key',
      name: 'Rental_customerId_fkey',
      references: {
        table: 'Customer',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Rental', {
      fields: ['staffId'],
      type: 'foreign key',
      name: 'Rental_staffId_fkey',
      references: {
        table: 'Staff',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Payment', {
      fields: ['customerId'],
      type: 'foreign key',
      name: 'Payment_customerId_fkey',
      references: {
        table: 'Customer',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Payment', {
      fields: ['staffId'],
      type: 'foreign key',
      name: 'Payment_staffId_fkey',
      references: {
        table: 'Staff',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('Payment', {
      fields: ['rentalId'],
      type: 'foreign key',
      name: 'Payment_rentalId_fkey',
      references: {
        table: 'Rental',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('City', {
      fields: ['countryId'],
      type: 'foreign key',
      name: 'City_countryId_fkey',
      references: {
        table: 'Country',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('FilmActor', {
      fields: ['filmId'],
      type: 'foreign key',
      name: 'FilmActor_filmId_fkey',
      references: {
        table: 'Film',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('FilmActor', {
      fields: ['actorId'],
      type: 'foreign key',
      name: 'FilmActor_actorId_fkey',
      references: {
        table: 'Actor',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('FilmCategory', {
      fields: ['filmId'],
      type: 'foreign key',
      name: 'FilmCategory_filmId_fkey',
      references: {
        table: 'Film',
        field: 'id'
      }
    })
    
    await queryInterface.addConstraint('FilmCategory', {
      fields: ['categoryId'],
      type: 'foreign key',
      name: 'FilmCategory_categoryId_fkey',
      references: {
        table: 'Category',
        field: 'id'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeConstraint('Film', 'Film_languageId_fkey')
    await queryInterface.removeConstraint('Film', 'Film_originalLanguageId_fkey')
    await queryInterface.removeConstraint('Inventory', 'Inventory_filmId_fkey')
    await queryInterface.removeConstraint('Inventory', 'Inventory_storeId_fkey')
    await queryInterface.removeConstraint('Store', 'Store_managerStaffId_fkey')
    await queryInterface.removeConstraint('Store', 'Store_addressId_fkey')
    await queryInterface.removeConstraint('Staff', 'Staff_storeId_fkey')
    await queryInterface.removeConstraint('Staff', 'Staff_addressId_fkey')
    await queryInterface.removeConstraint('Customer', 'Customer_storeId_fkey')
    await queryInterface.removeConstraint('Customer', 'Customer_addressId_fkey')
    await queryInterface.removeConstraint('Address', 'Address_cityId_fkey')
    await queryInterface.removeConstraint('Rental', 'Rental_inventoryId_fkey')
    await queryInterface.removeConstraint('Rental', 'Rental_customerId_fkey')
    await queryInterface.removeConstraint('Rental', 'Rental_staffId_fkey')
    await queryInterface.removeConstraint('Payment', 'Payment_customerId_fkey')
    await queryInterface.removeConstraint('Payment', 'Payment_staffId_fkey')
    await queryInterface.removeConstraint('Payment', 'Payment_rentalId_fkey')
    await queryInterface.removeConstraint('City', 'City_countryId_fkey')
    await queryInterface.removeConstraint('FilmActor', 'FilmActor_filmId_fkey')
    await queryInterface.removeConstraint('FilmActor', 'FilmActor_actorId_fkey')
    await queryInterface.removeConstraint('FilmCategory', 'FilmCategory_filmId_fkey')
    await queryInterface.removeConstraint('FilmCategory', 'FilmCategory_categoryId_fkey')
  }
};

/******************************************************************************
 *                          /sakila/models/Actor.ts                           *
 ******************************************************************************/

import {
  Association,
  BelongsToManyGetAssociationsMixin,
  BelongsToManySetAssociationsMixin,
  BelongsToManyAddAssociationMixin,
  BelongsToManyAddAssociationsMixin,
  BelongsToManyCreateAssociationMixin,
  BelongsToManyRemoveAssociationMixin,
  BelongsToManyRemoveAssociationsMixin,
  BelongsToManyHasAssociationMixin,
  BelongsToManyHasAssociationsMixin,
  BelongsToManyCountAssociationsMixin,
  CreationOptional,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Film } from './Film'

export class Actor extends Model<
  InferAttributes<Actor>,
  InferCreationAttributes<Actor>
> {
  declare id: CreationOptional<number>
  declare firstName: string
  declare lastName: string
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Actor belongsToMany Film
  declare films: NonAttribute<Film[]>
  declare getFilms: BelongsToManyGetAssociationsMixin<Film>
  declare setFilms: BelongsToManySetAssociationsMixin<Film, number>
  declare addFilm: BelongsToManyAddAssociationMixin<Film, number>
  declare addFilms: BelongsToManyAddAssociationsMixin<Film, number>
  declare createFilm: BelongsToManyCreateAssociationMixin<Film>
  declare removeFilm: BelongsToManyRemoveAssociationMixin<Film, number>
  declare removeFilms: BelongsToManyRemoveAssociationsMixin<Film, number>
  declare hasFilm: BelongsToManyHasAssociationMixin<Film, number>
  declare hasFilms: BelongsToManyHasAssociationsMixin<Film, number>
  declare countFilms: BelongsToManyCountAssociationsMixin
  
  declare static associations: {
    films: Association<Actor, Film>
  }

  static initModel(sequelize: Sequelize): typeof Actor {
    Actor.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Actor
  }
}


/******************************************************************************
 *                         /sakila/models/Address.ts                          *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  HasOneGetAssociationMixin,
  HasOneSetAssociationMixin,
  HasOneCreateAssociationMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { City } from './City'
import type { Customer } from './Customer'
import type { Staff } from './Staff'
import type { Store } from './Store'

export class Address extends Model<
  InferAttributes<Address>,
  InferCreationAttributes<Address>
> {
  declare id: CreationOptional<number>
  declare address: string
  declare address2: string
  declare postalCode: string | null
  declare phone: string
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Address belongsTo City
  declare city: NonAttribute<City>
  declare getCity: BelongsToGetAssociationMixin<City>
  declare setCity: BelongsToSetAssociationMixin<City, number>
  declare createCity: BelongsToCreateAssociationMixin<City>
  
  // Address hasOne Customer
  declare customer: NonAttribute<Customer>
  declare getCustomer: HasOneGetAssociationMixin<Customer>
  declare setCustomer: HasOneSetAssociationMixin<Customer, number>
  declare createCustomer: HasOneCreateAssociationMixin<Customer>
  
  // Address hasOne Staff
  declare staff: NonAttribute<Staff>
  declare getStaff: HasOneGetAssociationMixin<Staff>
  declare setStaff: HasOneSetAssociationMixin<Staff, number>
  declare createStaff: HasOneCreateAssociationMixin<Staff>
  
  // Address hasOne Store
  declare store: NonAttribute<Store>
  declare getStore: HasOneGetAssociationMixin<Store>
  declare setStore: HasOneSetAssociationMixin<Store, number>
  declare createStore: HasOneCreateAssociationMixin<Store>
  
  declare static associations: {
    city: Association<Address, City>,
    customer: Association<Address, Customer>,
    staff: Association<Address, Staff>,
    store: Association<Address, Store>
  }

  static initModel(sequelize: Sequelize): typeof Address {
    Address.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      address: {
        type: DataTypes.STRING,
        allowNull: false
      },
      address2: {
        type: DataTypes.STRING,
        allowNull: false
      },
      postalCode: {
        type: DataTypes.STRING
      },
      phone: {
        type: DataTypes.STRING,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Address
  }
}


/******************************************************************************
 *                         /sakila/models/Category.ts                         *
 ******************************************************************************/

import {
  Association,
  BelongsToManyGetAssociationsMixin,
  BelongsToManySetAssociationsMixin,
  BelongsToManyAddAssociationMixin,
  BelongsToManyAddAssociationsMixin,
  BelongsToManyCreateAssociationMixin,
  BelongsToManyRemoveAssociationMixin,
  BelongsToManyRemoveAssociationsMixin,
  BelongsToManyHasAssociationMixin,
  BelongsToManyHasAssociationsMixin,
  BelongsToManyCountAssociationsMixin,
  CreationOptional,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Film } from './Film'

export class Category extends Model<
  InferAttributes<Category>,
  InferCreationAttributes<Category>
> {
  declare id: CreationOptional<number>
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Category belongsToMany Film
  declare films: NonAttribute<Film[]>
  declare getFilms: BelongsToManyGetAssociationsMixin<Film>
  declare setFilms: BelongsToManySetAssociationsMixin<Film, number>
  declare addFilm: BelongsToManyAddAssociationMixin<Film, number>
  declare addFilms: BelongsToManyAddAssociationsMixin<Film, number>
  declare createFilm: BelongsToManyCreateAssociationMixin<Film>
  declare removeFilm: BelongsToManyRemoveAssociationMixin<Film, number>
  declare removeFilms: BelongsToManyRemoveAssociationsMixin<Film, number>
  declare hasFilm: BelongsToManyHasAssociationMixin<Film, number>
  declare hasFilms: BelongsToManyHasAssociationsMixin<Film, number>
  declare countFilms: BelongsToManyCountAssociationsMixin
  
  declare static associations: {
    films: Association<Category, Film>
  }

  static initModel(sequelize: Sequelize): typeof Category {
    Category.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Category
  }
}


/******************************************************************************
 *                           /sakila/models/City.ts                           *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Address } from './Address'
import type { Country } from './Country'

export class City extends Model<
  InferAttributes<City>,
  InferCreationAttributes<City>
> {
  declare id: CreationOptional<number>
  declare city: string
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // City belongsTo Country
  declare country: NonAttribute<Country>
  declare getCountry: BelongsToGetAssociationMixin<Country>
  declare setCountry: BelongsToSetAssociationMixin<Country, number>
  declare createCountry: BelongsToCreateAssociationMixin<Country>
  
  // City hasMany Address
  declare addresses: NonAttribute<Address[]>
  declare getAddresses: HasManyGetAssociationsMixin<Address>
  declare setAddresses: HasManySetAssociationsMixin<Address, number>
  declare addAddress: HasManyAddAssociationMixin<Address, number>
  declare addAddresses: HasManyAddAssociationsMixin<Address, number>
  declare createAddress: HasManyCreateAssociationMixin<Address>
  declare removeAddress: HasManyRemoveAssociationMixin<Address, number>
  declare removeAddresses: HasManyRemoveAssociationsMixin<Address, number>
  declare hasAddress: HasManyHasAssociationMixin<Address, number>
  declare hasAddresses: HasManyHasAssociationsMixin<Address, number>
  declare countAddresses: HasManyCountAssociationsMixin
  
  declare static associations: {
    country: Association<City, Country>,
    addresses: Association<City, Address>
  }

  static initModel(sequelize: Sequelize): typeof City {
    City.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      city: {
        type: DataTypes.STRING,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return City
  }
}


/******************************************************************************
 *                         /sakila/models/Country.ts                          *
 ******************************************************************************/

import {
  Association,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { City } from './City'

export class Country extends Model<
  InferAttributes<Country>,
  InferCreationAttributes<Country>
> {
  declare id: CreationOptional<number>
  declare country: string
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Country hasMany City
  declare cities: NonAttribute<City[]>
  declare getCities: HasManyGetAssociationsMixin<City>
  declare setCities: HasManySetAssociationsMixin<City, number>
  declare addCity: HasManyAddAssociationMixin<City, number>
  declare addCities: HasManyAddAssociationsMixin<City, number>
  declare createCity: HasManyCreateAssociationMixin<City>
  declare removeCity: HasManyRemoveAssociationMixin<City, number>
  declare removeCities: HasManyRemoveAssociationsMixin<City, number>
  declare hasCity: HasManyHasAssociationMixin<City, number>
  declare hasCities: HasManyHasAssociationsMixin<City, number>
  declare countCities: HasManyCountAssociationsMixin
  
  declare static associations: {
    cities: Association<Country, City>
  }

  static initModel(sequelize: Sequelize): typeof Country {
    Country.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      country: {
        type: DataTypes.STRING,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Country
  }
}


/******************************************************************************
 *                         /sakila/models/Customer.ts                         *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Address } from './Address'
import type { Payment } from './Payment'
import type { Rental } from './Rental'
import type { Store } from './Store'

export class Customer extends Model<
  InferAttributes<Customer>,
  InferCreationAttributes<Customer>
> {
  declare id: CreationOptional<number>
  declare firstName: string
  declare lastName: string
  declare email: string | null
  declare active: boolean
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Customer belongsTo Store
  declare store: NonAttribute<Store>
  declare getStore: BelongsToGetAssociationMixin<Store>
  declare setStore: BelongsToSetAssociationMixin<Store, number>
  declare createStore: BelongsToCreateAssociationMixin<Store>
  
  // Customer belongsTo Address
  declare address: NonAttribute<Address>
  declare getAddress: BelongsToGetAssociationMixin<Address>
  declare setAddress: BelongsToSetAssociationMixin<Address, number>
  declare createAddress: BelongsToCreateAssociationMixin<Address>
  
  // Customer hasMany Rental
  declare rentals: NonAttribute<Rental[]>
  declare getRentals: HasManyGetAssociationsMixin<Rental>
  declare setRentals: HasManySetAssociationsMixin<Rental, number>
  declare addRental: HasManyAddAssociationMixin<Rental, number>
  declare addRentals: HasManyAddAssociationsMixin<Rental, number>
  declare createRental: HasManyCreateAssociationMixin<Rental>
  declare removeRental: HasManyRemoveAssociationMixin<Rental, number>
  declare removeRentals: HasManyRemoveAssociationsMixin<Rental, number>
  declare hasRental: HasManyHasAssociationMixin<Rental, number>
  declare hasRentals: HasManyHasAssociationsMixin<Rental, number>
  declare countRentals: HasManyCountAssociationsMixin
  
  // Customer hasMany Payment
  declare payments: NonAttribute<Payment[]>
  declare getPayments: HasManyGetAssociationsMixin<Payment>
  declare setPayments: HasManySetAssociationsMixin<Payment, number>
  declare addPayment: HasManyAddAssociationMixin<Payment, number>
  declare addPayments: HasManyAddAssociationsMixin<Payment, number>
  declare createPayment: HasManyCreateAssociationMixin<Payment>
  declare removePayment: HasManyRemoveAssociationMixin<Payment, number>
  declare removePayments: HasManyRemoveAssociationsMixin<Payment, number>
  declare hasPayment: HasManyHasAssociationMixin<Payment, number>
  declare hasPayments: HasManyHasAssociationsMixin<Payment, number>
  declare countPayments: HasManyCountAssociationsMixin
  
  declare static associations: {
    store: Association<Customer, Store>,
    address: Association<Customer, Address>,
    rentals: Association<Customer, Rental>,
    payments: Association<Customer, Payment>
  }

  static initModel(sequelize: Sequelize): typeof Customer {
    Customer.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      email: {
        type: DataTypes.STRING
      },
      active: {
        type: DataTypes.BOOLEAN,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Customer
  }
}


/******************************************************************************
 *                           /sakila/models/Film.ts                           *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  BelongsToManyGetAssociationsMixin,
  BelongsToManySetAssociationsMixin,
  BelongsToManyAddAssociationMixin,
  BelongsToManyAddAssociationsMixin,
  BelongsToManyCreateAssociationMixin,
  BelongsToManyRemoveAssociationMixin,
  BelongsToManyRemoveAssociationsMixin,
  BelongsToManyHasAssociationMixin,
  BelongsToManyHasAssociationsMixin,
  BelongsToManyCountAssociationsMixin,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Actor } from './Actor'
import type { Category } from './Category'
import type { Inventory } from './Inventory'
import type { Language } from './Language'

export class Film extends Model<
  InferAttributes<Film>,
  InferCreationAttributes<Film>
> {
  declare id: CreationOptional<number>
  declare title: string
  declare description: string | null
  declare releaseYear: number | null
  declare languageId: number
  declare originalLanguageId: number | null
  declare rentalDuration: number
  declare rentalRate: number
  declare length: number | null
  declare rating: 'G' | 'PG' | 'PG-13' | 'R' | 'NC-17'
  declare specialFeature: Array<'Trailers' | 'Commentaries' | 'Deleted Scenes' | 'Behind the Scenes'>
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Film belongsTo Language
  declare language: NonAttribute<Language>
  declare getLanguage: BelongsToGetAssociationMixin<Language>
  declare setLanguage: BelongsToSetAssociationMixin<Language, number>
  declare createLanguage: BelongsToCreateAssociationMixin<Language>
  
  // Film belongsTo Language (as OriginalLanguage)
  declare originalLanguage: NonAttribute<Language>
  declare getOriginalLanguage: BelongsToGetAssociationMixin<Language>
  declare setOriginalLanguage: BelongsToSetAssociationMixin<Language, number>
  declare createOriginalLanguage: BelongsToCreateAssociationMixin<Language>
  
  // Film hasMany Inventory
  declare inventories: NonAttribute<Inventory[]>
  declare getInventories: HasManyGetAssociationsMixin<Inventory>
  declare setInventories: HasManySetAssociationsMixin<Inventory, number>
  declare addInventory: HasManyAddAssociationMixin<Inventory, number>
  declare addInventories: HasManyAddAssociationsMixin<Inventory, number>
  declare createInventory: HasManyCreateAssociationMixin<Inventory>
  declare removeInventory: HasManyRemoveAssociationMixin<Inventory, number>
  declare removeInventories: HasManyRemoveAssociationsMixin<Inventory, number>
  declare hasInventory: HasManyHasAssociationMixin<Inventory, number>
  declare hasInventories: HasManyHasAssociationsMixin<Inventory, number>
  declare countInventories: HasManyCountAssociationsMixin
  
  // Film belongsToMany Actor
  declare actors: NonAttribute<Actor[]>
  declare getActors: BelongsToManyGetAssociationsMixin<Actor>
  declare setActors: BelongsToManySetAssociationsMixin<Actor, number>
  declare addActor: BelongsToManyAddAssociationMixin<Actor, number>
  declare addActors: BelongsToManyAddAssociationsMixin<Actor, number>
  declare createActor: BelongsToManyCreateAssociationMixin<Actor>
  declare removeActor: BelongsToManyRemoveAssociationMixin<Actor, number>
  declare removeActors: BelongsToManyRemoveAssociationsMixin<Actor, number>
  declare hasActor: BelongsToManyHasAssociationMixin<Actor, number>
  declare hasActors: BelongsToManyHasAssociationsMixin<Actor, number>
  declare countActors: BelongsToManyCountAssociationsMixin
  
  // Film belongsToMany Category
  declare categories: NonAttribute<Category[]>
  declare getCategories: BelongsToManyGetAssociationsMixin<Category>
  declare setCategories: BelongsToManySetAssociationsMixin<Category, number>
  declare addCategory: BelongsToManyAddAssociationMixin<Category, number>
  declare addCategories: BelongsToManyAddAssociationsMixin<Category, number>
  declare createCategory: BelongsToManyCreateAssociationMixin<Category>
  declare removeCategory: BelongsToManyRemoveAssociationMixin<Category, number>
  declare removeCategories: BelongsToManyRemoveAssociationsMixin<Category, number>
  declare hasCategory: BelongsToManyHasAssociationMixin<Category, number>
  declare hasCategories: BelongsToManyHasAssociationsMixin<Category, number>
  declare countCategories: BelongsToManyCountAssociationsMixin
  
  declare static associations: {
    language: Association<Film, Language>,
    originalLanguage: Association<Film, Language>,
    inventories: Association<Film, Inventory>,
    actors: Association<Film, Actor>,
    categories: Association<Film, Category>
  }

  static initModel(sequelize: Sequelize): typeof Film {
    Film.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        allowNull: false
      },
      description: {
        type: DataTypes.STRING
      },
      releaseYear: {
        type: DataTypes.INTEGER
      },
      languageId: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      originalLanguageId: {
        type: DataTypes.INTEGER
      },
      rentalDuration: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      rentalRate: {
        type: DataTypes.DECIMAL,
        allowNull: false
      },
      length: {
        type: DataTypes.INTEGER
      },
      rating: {
        type: DataTypes.ENUM('G', 'PG', 'PG-13', 'R', 'NC-17'),
        allowNull: false
      },
      specialFeature: {
        type: DataTypes.ARRAY(DataTypes.ENUM('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes')),
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Film
  }
}


/******************************************************************************
 *                        /sakila/models/FilmActor.ts                         *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Actor } from './Actor'
import type { Film } from './Film'

export class FilmActor extends Model<
  InferAttributes<FilmActor>,
  InferCreationAttributes<FilmActor>
> {
  declare id: CreationOptional<number>
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // FilmActor belongsTo Film
  declare film: NonAttribute<Film>
  declare getFilm: BelongsToGetAssociationMixin<Film>
  declare setFilm: BelongsToSetAssociationMixin<Film, number>
  declare createFilm: BelongsToCreateAssociationMixin<Film>
  
  // FilmActor belongsTo Actor
  declare actor: NonAttribute<Actor>
  declare getActor: BelongsToGetAssociationMixin<Actor>
  declare setActor: BelongsToSetAssociationMixin<Actor, number>
  declare createActor: BelongsToCreateAssociationMixin<Actor>
  
  declare static associations: {
    film: Association<FilmActor, Film>,
    actor: Association<FilmActor, Actor>
  }

  static initModel(sequelize: Sequelize): typeof FilmActor {
    FilmActor.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return FilmActor
  }
}


/******************************************************************************
 *                       /sakila/models/FilmCategory.ts                       *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Category } from './Category'
import type { Film } from './Film'

export class FilmCategory extends Model<
  InferAttributes<FilmCategory>,
  InferCreationAttributes<FilmCategory>
> {
  declare id: CreationOptional<number>
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // FilmCategory belongsTo Film
  declare film: NonAttribute<Film>
  declare getFilm: BelongsToGetAssociationMixin<Film>
  declare setFilm: BelongsToSetAssociationMixin<Film, number>
  declare createFilm: BelongsToCreateAssociationMixin<Film>
  
  // FilmCategory belongsTo Category
  declare category: NonAttribute<Category>
  declare getCategory: BelongsToGetAssociationMixin<Category>
  declare setCategory: BelongsToSetAssociationMixin<Category, number>
  declare createCategory: BelongsToCreateAssociationMixin<Category>
  
  declare static associations: {
    film: Association<FilmCategory, Film>,
    category: Association<FilmCategory, Category>
  }

  static initModel(sequelize: Sequelize): typeof FilmCategory {
    FilmCategory.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return FilmCategory
  }
}


/******************************************************************************
 *                          /sakila/models/index.ts                           *
 ******************************************************************************/

import type { Sequelize, Model } from 'sequelize'
import { Actor } from './Actor'
import { Film } from './Film'
import { Language } from './Language'
import { Category } from './Category'
import { Inventory } from './Inventory'
import { Store } from './Store'
import { Staff } from './Staff'
import { Customer } from './Customer'
import { Address } from './Address'
import { Rental } from './Rental'
import { Payment } from './Payment'
import { City } from './City'
import { Country } from './Country'
import { FilmActor } from './FilmActor'
import { FilmCategory } from './FilmCategory'

export {
  Actor,
  Film,
  Language,
  Category,
  Inventory,
  Store,
  Staff,
  Customer,
  Address,
  Rental,
  Payment,
  City,
  Country,
  FilmActor,
  FilmCategory
}

export function initModels(sequelize: Sequelize) {
  Actor.initModel(sequelize)
  Film.initModel(sequelize)
  Language.initModel(sequelize)
  Category.initModel(sequelize)
  Inventory.initModel(sequelize)
  Store.initModel(sequelize)
  Staff.initModel(sequelize)
  Customer.initModel(sequelize)
  Address.initModel(sequelize)
  Rental.initModel(sequelize)
  Payment.initModel(sequelize)
  City.initModel(sequelize)
  Country.initModel(sequelize)
  FilmActor.initModel(sequelize)
  FilmCategory.initModel(sequelize)

  Actor.belongsToMany(Film, {
    as: 'films',
    through: FilmActor,
    foreignKey: 'actorId',
    otherKey: 'filmId',
    onDelete: 'CASCADE'
  })
  Film.belongsTo(Language, {
    as: 'language',
    foreignKey: 'languageId'
  })
  Film.belongsTo(Language, {
    as: 'originalLanguage',
    foreignKey: 'originalLanguageId'
  })
  Film.hasMany(Inventory, {
    as: 'inventories',
    foreignKey: 'filmId'
  })
  Film.belongsToMany(Actor, {
    as: 'actors',
    through: FilmActor,
    foreignKey: 'filmId',
    otherKey: 'actorId',
    onDelete: 'CASCADE'
  })
  Film.belongsToMany(Category, {
    as: 'categories',
    through: FilmCategory,
    foreignKey: 'filmId',
    otherKey: 'categoryId',
    onDelete: 'CASCADE'
  })
  Language.hasMany(Film, {
    as: 'films',
    foreignKey: 'languageId'
  })
  Language.hasMany(Film, {
    as: 'originalLanguageFilms',
    foreignKey: 'originalLanguageId'
  })
  Category.belongsToMany(Film, {
    as: 'films',
    through: FilmCategory,
    foreignKey: 'categoryId',
    otherKey: 'filmId',
    onDelete: 'CASCADE'
  })
  Inventory.belongsTo(Film, {
    as: 'film',
    foreignKey: 'filmId'
  })
  Inventory.belongsTo(Store, {
    as: 'store',
    foreignKey: 'storeId'
  })
  Store.hasMany(Inventory, {
    as: 'inventories',
    foreignKey: 'storeId'
  })
  Store.hasMany(Staff, {
    as: 'staffs',
    foreignKey: 'storeId',
    constraints: false
  })
  Store.hasMany(Customer, {
    as: 'customers',
    foreignKey: 'storeId'
  })
  Store.belongsTo(Staff, {
    as: 'manager',
    foreignKey: 'managerStaffId',
    constraints: false
  })
  Store.belongsTo(Address, {
    as: 'address',
    foreignKey: 'addressId'
  })
  Staff.belongsTo(Store, {
    as: 'store',
    foreignKey: 'storeId',
    constraints: false
  })
  Staff.hasMany(Store, {
    as: 'managedStores',
    foreignKey: 'managerStaffId',
    constraints: false
  })
  Staff.belongsTo(Address, {
    as: 'address',
    foreignKey: 'addressId'
  })
  Staff.hasMany(Rental, {
    as: 'rentals',
    foreignKey: 'staffId'
  })
  Staff.hasMany(Payment, {
    as: 'payments',
    foreignKey: 'staffId'
  })
  Customer.belongsTo(Store, {
    as: 'store',
    foreignKey: 'storeId'
  })
  Customer.belongsTo(Address, {
    as: 'address',
    foreignKey: 'addressId'
  })
  Customer.hasMany(Rental, {
    as: 'rentals',
    foreignKey: 'customerId'
  })
  Customer.hasMany(Payment, {
    as: 'payments',
    foreignKey: 'customerId'
  })
  Address.belongsTo(City, {
    as: 'city',
    foreignKey: 'cityId'
  })
  Address.hasOne(Customer, {
    as: 'customer',
    foreignKey: 'addressId'
  })
  Address.hasOne(Staff, {
    as: 'staff',
    foreignKey: 'addressId'
  })
  Address.hasOne(Store, {
    as: 'store',
    foreignKey: 'addressId'
  })
  Rental.belongsTo(Inventory, {
    as: 'inventory',
    foreignKey: 'inventoryId'
  })
  Rental.belongsTo(Customer, {
    as: 'customer',
    foreignKey: 'customerId'
  })
  Rental.belongsTo(Staff, {
    as: 'staff',
    foreignKey: 'staffId'
  })
  Rental.hasMany(Payment, {
    as: 'payments',
    foreignKey: 'rentalId'
  })
  Payment.belongsTo(Customer, {
    as: 'customer',
    foreignKey: 'customerId'
  })
  Payment.belongsTo(Staff, {
    as: 'staff',
    foreignKey: 'staffId'
  })
  Payment.belongsTo(Rental, {
    as: 'rental',
    foreignKey: 'rentalId'
  })
  City.belongsTo(Country, {
    as: 'country',
    foreignKey: 'countryId'
  })
  City.hasMany(Address, {
    as: 'addresses',
    foreignKey: 'cityId'
  })
  Country.hasMany(City, {
    as: 'cities',
    foreignKey: 'countryId'
  })
  FilmActor.belongsTo(Film, {
    as: 'film',
    foreignKey: 'filmId'
  })
  FilmActor.belongsTo(Actor, {
    as: 'actor',
    foreignKey: 'actorId'
  })
  FilmCategory.belongsTo(Film, {
    as: 'film',
    foreignKey: 'filmId'
  })
  FilmCategory.belongsTo(Category, {
    as: 'category',
    foreignKey: 'categoryId'
  })

  return {
    Actor,
    Film,
    Language,
    Category,
    Inventory,
    Store,
    Staff,
    Customer,
    Address,
    Rental,
    Payment,
    City,
    Country,
    FilmActor,
    FilmCategory
  }
}


/******************************************************************************
 *                        /sakila/models/Inventory.ts                         *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Film } from './Film'
import type { Store } from './Store'

export class Inventory extends Model<
  InferAttributes<Inventory>,
  InferCreationAttributes<Inventory>
> {
  declare id: CreationOptional<number>
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Inventory belongsTo Film
  declare film: NonAttribute<Film>
  declare getFilm: BelongsToGetAssociationMixin<Film>
  declare setFilm: BelongsToSetAssociationMixin<Film, number>
  declare createFilm: BelongsToCreateAssociationMixin<Film>
  
  // Inventory belongsTo Store
  declare store: NonAttribute<Store>
  declare getStore: BelongsToGetAssociationMixin<Store>
  declare setStore: BelongsToSetAssociationMixin<Store, number>
  declare createStore: BelongsToCreateAssociationMixin<Store>
  
  declare static associations: {
    film: Association<Inventory, Film>,
    store: Association<Inventory, Store>
  }

  static initModel(sequelize: Sequelize): typeof Inventory {
    Inventory.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Inventory
  }
}


/******************************************************************************
 *                         /sakila/models/Language.ts                         *
 ******************************************************************************/

import {
  Association,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Film } from './Film'

export class Language extends Model<
  InferAttributes<Language>,
  InferCreationAttributes<Language>
> {
  declare id: CreationOptional<number>
  declare name: string
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Language hasMany Film
  declare films: NonAttribute<Film[]>
  declare getFilms: HasManyGetAssociationsMixin<Film>
  declare setFilms: HasManySetAssociationsMixin<Film, number>
  declare addFilm: HasManyAddAssociationMixin<Film, number>
  declare addFilms: HasManyAddAssociationsMixin<Film, number>
  declare createFilm: HasManyCreateAssociationMixin<Film, 'languageId'>
  declare removeFilm: HasManyRemoveAssociationMixin<Film, number>
  declare removeFilms: HasManyRemoveAssociationsMixin<Film, number>
  declare hasFilm: HasManyHasAssociationMixin<Film, number>
  declare hasFilms: HasManyHasAssociationsMixin<Film, number>
  declare countFilms: HasManyCountAssociationsMixin
  
  // Language hasMany Film (as OriginalLanguageFilm)
  declare originalLanguageFilms: NonAttribute<Film[]>
  declare getOriginalLanguageFilms: HasManyGetAssociationsMixin<Film>
  declare setOriginalLanguageFilms: HasManySetAssociationsMixin<Film, number>
  declare addOriginalLanguageFilm: HasManyAddAssociationMixin<Film, number>
  declare addOriginalLanguageFilms: HasManyAddAssociationsMixin<Film, number>
  declare createOriginalLanguageFilm: HasManyCreateAssociationMixin<Film>
  declare removeOriginalLanguageFilm: HasManyRemoveAssociationMixin<Film, number>
  declare removeOriginalLanguageFilms: HasManyRemoveAssociationsMixin<Film, number>
  declare hasOriginalLanguageFilm: HasManyHasAssociationMixin<Film, number>
  declare hasOriginalLanguageFilms: HasManyHasAssociationsMixin<Film, number>
  declare countOriginalLanguageFilms: HasManyCountAssociationsMixin
  
  declare static associations: {
    films: Association<Language, Film>,
    originalLanguageFilms: Association<Language, Film>
  }

  static initModel(sequelize: Sequelize): typeof Language {
    Language.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Language
  }
}


/******************************************************************************
 *                         /sakila/models/Payment.ts                          *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Customer } from './Customer'
import type { Rental } from './Rental'
import type { Staff } from './Staff'

export class Payment extends Model<
  InferAttributes<Payment>,
  InferCreationAttributes<Payment>
> {
  declare id: CreationOptional<number>
  declare amount: number
  declare paymentDate: Date
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Payment belongsTo Customer
  declare customer: NonAttribute<Customer>
  declare getCustomer: BelongsToGetAssociationMixin<Customer>
  declare setCustomer: BelongsToSetAssociationMixin<Customer, number>
  declare createCustomer: BelongsToCreateAssociationMixin<Customer>
  
  // Payment belongsTo Staff
  declare staff: NonAttribute<Staff>
  declare getStaff: BelongsToGetAssociationMixin<Staff>
  declare setStaff: BelongsToSetAssociationMixin<Staff, number>
  declare createStaff: BelongsToCreateAssociationMixin<Staff>
  
  // Payment belongsTo Rental
  declare rental: NonAttribute<Rental>
  declare getRental: BelongsToGetAssociationMixin<Rental>
  declare setRental: BelongsToSetAssociationMixin<Rental, number>
  declare createRental: BelongsToCreateAssociationMixin<Rental>
  
  declare static associations: {
    customer: Association<Payment, Customer>,
    staff: Association<Payment, Staff>,
    rental: Association<Payment, Rental>
  }

  static initModel(sequelize: Sequelize): typeof Payment {
    Payment.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      amount: {
        type: DataTypes.DECIMAL,
        allowNull: false
      },
      paymentDate: {
        type: DataTypes.DATE,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Payment
  }
}


/******************************************************************************
 *                          /sakila/models/Rental.ts                          *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Customer } from './Customer'
import type { Inventory } from './Inventory'
import type { Payment } from './Payment'
import type { Staff } from './Staff'

export class Rental extends Model<
  InferAttributes<Rental>,
  InferCreationAttributes<Rental>
> {
  declare id: CreationOptional<number>
  declare rentalDate: string
  declare returnDate: string | null
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Rental belongsTo Inventory
  declare inventory: NonAttribute<Inventory>
  declare getInventory: BelongsToGetAssociationMixin<Inventory>
  declare setInventory: BelongsToSetAssociationMixin<Inventory, number>
  declare createInventory: BelongsToCreateAssociationMixin<Inventory>
  
  // Rental belongsTo Customer
  declare customer: NonAttribute<Customer>
  declare getCustomer: BelongsToGetAssociationMixin<Customer>
  declare setCustomer: BelongsToSetAssociationMixin<Customer, number>
  declare createCustomer: BelongsToCreateAssociationMixin<Customer>
  
  // Rental belongsTo Staff
  declare staff: NonAttribute<Staff>
  declare getStaff: BelongsToGetAssociationMixin<Staff>
  declare setStaff: BelongsToSetAssociationMixin<Staff, number>
  declare createStaff: BelongsToCreateAssociationMixin<Staff>
  
  // Rental hasMany Payment
  declare payments: NonAttribute<Payment[]>
  declare getPayments: HasManyGetAssociationsMixin<Payment>
  declare setPayments: HasManySetAssociationsMixin<Payment, number>
  declare addPayment: HasManyAddAssociationMixin<Payment, number>
  declare addPayments: HasManyAddAssociationsMixin<Payment, number>
  declare createPayment: HasManyCreateAssociationMixin<Payment>
  declare removePayment: HasManyRemoveAssociationMixin<Payment, number>
  declare removePayments: HasManyRemoveAssociationsMixin<Payment, number>
  declare hasPayment: HasManyHasAssociationMixin<Payment, number>
  declare hasPayments: HasManyHasAssociationsMixin<Payment, number>
  declare countPayments: HasManyCountAssociationsMixin
  
  declare static associations: {
    inventory: Association<Rental, Inventory>,
    customer: Association<Rental, Customer>,
    staff: Association<Rental, Staff>,
    payments: Association<Rental, Payment>
  }

  static initModel(sequelize: Sequelize): typeof Rental {
    Rental.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      rentalDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      returnDate: {
        type: DataTypes.STRING
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Rental
  }
}


/******************************************************************************
 *                          /sakila/models/Staff.ts                           *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Address } from './Address'
import type { Payment } from './Payment'
import type { Rental } from './Rental'
import type { Store } from './Store'

export class Staff extends Model<
  InferAttributes<Staff>,
  InferCreationAttributes<Staff>
> {
  declare id: CreationOptional<number>
  declare firstName: string
  declare lastName: string
  declare picture: Buffer | null
  declare email: string | null
  declare active: boolean
  declare username: string
  declare password: string | null
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Staff belongsTo Store
  declare store: NonAttribute<Store>
  declare getStore: BelongsToGetAssociationMixin<Store>
  declare setStore: BelongsToSetAssociationMixin<Store, number>
  declare createStore: BelongsToCreateAssociationMixin<Store>
  
  // Staff hasMany Store (as ManagedStore)
  declare managedStores: NonAttribute<Store[]>
  declare getManagedStores: HasManyGetAssociationsMixin<Store>
  declare setManagedStores: HasManySetAssociationsMixin<Store, number>
  declare addManagedStore: HasManyAddAssociationMixin<Store, number>
  declare addManagedStores: HasManyAddAssociationsMixin<Store, number>
  declare createManagedStore: HasManyCreateAssociationMixin<Store>
  declare removeManagedStore: HasManyRemoveAssociationMixin<Store, number>
  declare removeManagedStores: HasManyRemoveAssociationsMixin<Store, number>
  declare hasManagedStore: HasManyHasAssociationMixin<Store, number>
  declare hasManagedStores: HasManyHasAssociationsMixin<Store, number>
  declare countManagedStores: HasManyCountAssociationsMixin
  
  // Staff belongsTo Address
  declare address: NonAttribute<Address>
  declare getAddress: BelongsToGetAssociationMixin<Address>
  declare setAddress: BelongsToSetAssociationMixin<Address, number>
  declare createAddress: BelongsToCreateAssociationMixin<Address>
  
  // Staff hasMany Rental
  declare rentals: NonAttribute<Rental[]>
  declare getRentals: HasManyGetAssociationsMixin<Rental>
  declare setRentals: HasManySetAssociationsMixin<Rental, number>
  declare addRental: HasManyAddAssociationMixin<Rental, number>
  declare addRentals: HasManyAddAssociationsMixin<Rental, number>
  declare createRental: HasManyCreateAssociationMixin<Rental>
  declare removeRental: HasManyRemoveAssociationMixin<Rental, number>
  declare removeRentals: HasManyRemoveAssociationsMixin<Rental, number>
  declare hasRental: HasManyHasAssociationMixin<Rental, number>
  declare hasRentals: HasManyHasAssociationsMixin<Rental, number>
  declare countRentals: HasManyCountAssociationsMixin
  
  // Staff hasMany Payment
  declare payments: NonAttribute<Payment[]>
  declare getPayments: HasManyGetAssociationsMixin<Payment>
  declare setPayments: HasManySetAssociationsMixin<Payment, number>
  declare addPayment: HasManyAddAssociationMixin<Payment, number>
  declare addPayments: HasManyAddAssociationsMixin<Payment, number>
  declare createPayment: HasManyCreateAssociationMixin<Payment>
  declare removePayment: HasManyRemoveAssociationMixin<Payment, number>
  declare removePayments: HasManyRemoveAssociationsMixin<Payment, number>
  declare hasPayment: HasManyHasAssociationMixin<Payment, number>
  declare hasPayments: HasManyHasAssociationsMixin<Payment, number>
  declare countPayments: HasManyCountAssociationsMixin
  
  declare static associations: {
    store: Association<Staff, Store>,
    managedStores: Association<Staff, Store>,
    address: Association<Staff, Address>,
    rentals: Association<Staff, Rental>,
    payments: Association<Staff, Payment>
  }

  static initModel(sequelize: Sequelize): typeof Staff {
    Staff.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      picture: {
        type: DataTypes.BLOB
      },
      email: {
        type: DataTypes.STRING
      },
      active: {
        type: DataTypes.BOOLEAN,
        allowNull: false
      },
      username: {
        type: DataTypes.STRING,
        allowNull: false
      },
      password: {
        type: DataTypes.STRING
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Staff
  }
}


/******************************************************************************
 *                          /sakila/models/Store.ts                           *
 ******************************************************************************/

import {
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
  CreationOptional,
  DataTypes,
  HasManyGetAssociationsMixin,
  HasManySetAssociationsMixin,
  HasManyAddAssociationMixin,
  HasManyAddAssociationsMixin,
  HasManyCreateAssociationMixin,
  HasManyRemoveAssociationMixin,
  HasManyRemoveAssociationsMixin,
  HasManyHasAssociationMixin,
  HasManyHasAssociationsMixin,
  HasManyCountAssociationsMixin,
  InferCreationAttributes,
  InferAttributes,
  Model,
  NonAttribute,
  Sequelize
} from 'sequelize'
import type { Address } from './Address'
import type { Customer } from './Customer'
import type { Inventory } from './Inventory'
import type { Staff } from './Staff'

export class Store extends Model<
  InferAttributes<Store>,
  InferCreationAttributes<Store>
> {
  declare id: CreationOptional<number>
  declare createdAt: CreationOptional<Date>
  declare updatedAt: CreationOptional<Date>

  // Store hasMany Inventory
  declare inventories: NonAttribute<Inventory[]>
  declare getInventories: HasManyGetAssociationsMixin<Inventory>
  declare setInventories: HasManySetAssociationsMixin<Inventory, number>
  declare addInventory: HasManyAddAssociationMixin<Inventory, number>
  declare addInventories: HasManyAddAssociationsMixin<Inventory, number>
  declare createInventory: HasManyCreateAssociationMixin<Inventory>
  declare removeInventory: HasManyRemoveAssociationMixin<Inventory, number>
  declare removeInventories: HasManyRemoveAssociationsMixin<Inventory, number>
  declare hasInventory: HasManyHasAssociationMixin<Inventory, number>
  declare hasInventories: HasManyHasAssociationsMixin<Inventory, number>
  declare countInventories: HasManyCountAssociationsMixin
  
  // Store hasMany Staff
  declare staffs: NonAttribute<Staff[]>
  declare getStaffs: HasManyGetAssociationsMixin<Staff>
  declare setStaffs: HasManySetAssociationsMixin<Staff, number>
  declare addStaff: HasManyAddAssociationMixin<Staff, number>
  declare addStaffs: HasManyAddAssociationsMixin<Staff, number>
  declare createStaff: HasManyCreateAssociationMixin<Staff>
  declare removeStaff: HasManyRemoveAssociationMixin<Staff, number>
  declare removeStaffs: HasManyRemoveAssociationsMixin<Staff, number>
  declare hasStaff: HasManyHasAssociationMixin<Staff, number>
  declare hasStaffs: HasManyHasAssociationsMixin<Staff, number>
  declare countStaffs: HasManyCountAssociationsMixin
  
  // Store hasMany Customer
  declare customers: NonAttribute<Customer[]>
  declare getCustomers: HasManyGetAssociationsMixin<Customer>
  declare setCustomers: HasManySetAssociationsMixin<Customer, number>
  declare addCustomer: HasManyAddAssociationMixin<Customer, number>
  declare addCustomers: HasManyAddAssociationsMixin<Customer, number>
  declare createCustomer: HasManyCreateAssociationMixin<Customer>
  declare removeCustomer: HasManyRemoveAssociationMixin<Customer, number>
  declare removeCustomers: HasManyRemoveAssociationsMixin<Customer, number>
  declare hasCustomer: HasManyHasAssociationMixin<Customer, number>
  declare hasCustomers: HasManyHasAssociationsMixin<Customer, number>
  declare countCustomers: HasManyCountAssociationsMixin
  
  // Store belongsTo Staff (as Manager)
  declare manager: NonAttribute<Staff>
  declare getManager: BelongsToGetAssociationMixin<Staff>
  declare setManager: BelongsToSetAssociationMixin<Staff, number>
  declare createManager: BelongsToCreateAssociationMixin<Staff>
  
  // Store belongsTo Address
  declare address: NonAttribute<Address>
  declare getAddress: BelongsToGetAssociationMixin<Address>
  declare setAddress: BelongsToSetAssociationMixin<Address, number>
  declare createAddress: BelongsToCreateAssociationMixin<Address>
  
  declare static associations: {
    inventories: Association<Store, Inventory>,
    staffs: Association<Store, Staff>,
    customers: Association<Store, Customer>,
    manager: Association<Store, Staff>,
    address: Association<Store, Address>
  }

  static initModel(sequelize: Sequelize): typeof Store {
    Store.init({
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE
      },
      updatedAt: {
        type: DataTypes.DATE
      }
    }, {
      sequelize
    })
    
    return Store
  }
}


`;
