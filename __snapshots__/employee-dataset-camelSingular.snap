// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework generates the correct code for employee-dataset-camelSingular 1`] = `

/****************************************
 * employee-dataset/.gitignore
 ****************************************/

node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp


/****************************************
 * employee-dataset/db.ts
 ****************************************/

import { Sequelize, Options } from 'sequelize'
import configs from './config/config.js'

const env = process.env.NODE_ENV || 'development'
const config = (configs as {[key: string]: Options})[env]

const db: Sequelize = new Sequelize({
  ...config,
  define: {
    freezeTableName: true
  }
})

export default db


/****************************************
 * employee-dataset/package.json
 ****************************************/

{
  "name": "employee-dataset",
  "version": "0.0.1",
  "description": "",
  "main": "server.ts",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "db:up": "echo creating && npm run db:create && echo created && npm run db:migrate && echo migrated",
    "db:reset": "npm run db:drop && npm run db:up",
    "db:create": "sequelize db:create",
    "db:drop": "[[ $NODE_ENV == production ]] && exit 1 || sequelize db:drop",
    "db:migrate": "sequelize db:migrate",
    "db:rollback": "sequelize db:migrate:undo",
    "db:rollback:all": "sequelize db:migrate:undo:all",
    "build": "tsc",
    "start": "node ./dist/server.js",
    "dev": "tsc-watch --onSuccess \\"node ./dist/server.js\\""
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "pg": "^8.7.1",
    "pg-hstore": "^2.3.4",
    "sequelize": "^6.14.1"
  },
  "devDependencies": {
    "@types/node": "^16.11.7",
    "@types/validator": "^13.7.1",
    "sequelize-cli": "^6.4.1",
    "tsc-watch": "^4.6.0",
    "typescript": "^4.5.5"
  }
}



/****************************************
 * employee-dataset/README.md
 ****************************************/

# employee dataset
This project was generated with [Sequelize UI](https://github.com/tomjschuster/sequelize-ui). The project is a simple [Node.js](https://nodejs.dev/) server with [Sequelize ORM](https://sequelize.org/).

Be sure to test all code for correctness and to test database migrations in a test environment before deploying to production.

## Running Project

### Prerequesites
- [Node.js](https://nodejs.dev/)
- [PostgreSQL](https://www.postgresql.org/)

### Setup
1. Install dependencies: \`npm install\`
2. Setup database: \`npm run db:up\`

### Run
- Local development: \`npm run dev\`
- Production build: \`npm run build && npm start\`

## Bug Reports
Please report any bugs with generated code at [Sequelize UI Issues](https://github.com/tomjschuster/sequelize-ui/issues).


/****************************************
 * employee-dataset/server.ts
 ****************************************/

import http from 'http'
import db from './db'
import { initModels } from './models'

async function run() {
  initModels(db)
  const hostname = process.env.HOSTNAME || '127.0.0.1'
  const port = parseInt(process.env.PORT || '3000')
  
  const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World')
  })
  
  server.listen(port, hostname, () => {
    console.log(\`Server running at http://\${hostname}:\${port}/\`)
  })
}

run()

/****************************************
 * employee-dataset/tsconfig.json
 ****************************************/

{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "dist",
    "strict": true,
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowJs": true,
    "forceConsistentCasingInFileNames": true
  }
}


/****************************************
 * employee-dataset/config/config.js
 ****************************************/

module.exports = {
  development: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'employee_dataset',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  test: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'employee_dataset',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  production: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME,
    username: process.env.POSTGRES_DB_USERNAME,
    password: process.env.POSTGRES_DB_PASSWORD,
    host: process.env.POSTGRES_DB_HOST,
    port: parseInt(process.env.POSTGRES_DB_PORT)
  }
}

/****************************************
 * employee-dataset/migrations/20201001000000-create-Employee.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Employee', {
      empNo: {
        type: DataTypes.INTEGER,
        field: 'empNo',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      birthDate: {
        type: DataTypes.DATEONLY,
        field: 'birthDate',
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        field: 'firstName',
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        field: 'lastName',
        allowNull: false
      },
      gender: {
        type: DataTypes.ENUM('M', 'F', 'O'),
        field: 'gender',
        allowNull: false
      },
      hireDate: {
        type: DataTypes.DATEONLY,
        field: 'hireDate',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Employee');
  },
};

/****************************************
 * employee-dataset/migrations/20201001000010-create-Department.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Department', {
      deptNo: {
        type: DataTypes.STRING,
        field: 'deptNo',
        primaryKey: true,
        allowNull: false
      },
      deptName: {
        type: DataTypes.STRING,
        field: 'deptName',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Department');
  },
};

/****************************************
 * employee-dataset/migrations/20201001000020-create-DeptEmp.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('DeptEmp', {
      empNo: {
        type: DataTypes.INTEGER,
        field: 'empNo',
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        field: 'deptNo',
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        field: 'fromDate',
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        field: 'toDate',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      departmentsId: {
        type: DataTypes.STRING,
        field: 'departmentsId'
      },
      employeeId: {
        type: DataTypes.INTEGER,
        field: 'employeeId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('DeptEmp');
  },
};

/****************************************
 * employee-dataset/migrations/20201001000030-create-DeptManager.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('DeptManager', {
      empNo: {
        type: DataTypes.INTEGER,
        field: 'empNo',
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        field: 'deptNo',
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        field: 'fromDate',
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        field: 'toDate',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      },
      departmentsId: {
        type: DataTypes.STRING,
        field: 'departmentsId'
      },
      managerId: {
        type: DataTypes.INTEGER,
        field: 'managerId'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('DeptManager');
  },
};

/****************************************
 * employee-dataset/migrations/20201001000040-create-Title.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Title', {
      empNo: {
        type: DataTypes.INTEGER,
        field: 'empNo',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        field: 'title',
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        field: 'fromDate',
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        field: 'toDate',
        allowNull: false
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Title');
  },
};

/****************************************
 * employee-dataset/migrations/20201001000050-create-Salary.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Salary', {
      empNo: {
        type: DataTypes.INTEGER,
        field: 'empNo',
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      salary: {
        type: DataTypes.INTEGER,
        field: 'salary',
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        field: 'fromDate',
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        field: 'toDate'
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Salary');
  },
};

/****************************************
 * employee-dataset/migrations/20201001000060-add-foreign-keys.js
 ****************************************/

const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addConstraint('DeptEmp', {
      fields: ['empNo'],
      type: 'foreign key',
      name: 'DeptEmp_empNo_fkey',
      references: {
        table: 'Employee',
        field: 'empNo'
      }
    })
    
    await queryInterface.addConstraint('DeptEmp', {
      fields: ['deptNo'],
      type: 'foreign key',
      name: 'DeptEmp_deptNo_fkey',
      references: {
        table: 'Department',
        field: 'deptNo'
      }
    })
    
    await queryInterface.addConstraint('DeptEmp', {
      fields: ['departmentsId'],
      type: 'foreign key',
      name: 'DeptEmp_departmentsId_fkey',
      references: {
        table: 'Department',
        field: 'deptNo'
      }
    })
    
    await queryInterface.addConstraint('DeptEmp', {
      fields: ['employeeId'],
      type: 'foreign key',
      name: 'DeptEmp_employeeId_fkey',
      references: {
        table: 'Employee',
        field: 'empNo'
      }
    })
    
    await queryInterface.addConstraint('DeptManager', {
      fields: ['empNo'],
      type: 'foreign key',
      name: 'DeptManager_empNo_fkey',
      references: {
        table: 'Employee',
        field: 'empNo'
      }
    })
    
    await queryInterface.addConstraint('DeptManager', {
      fields: ['deptNo'],
      type: 'foreign key',
      name: 'DeptManager_deptNo_fkey',
      references: {
        table: 'Department',
        field: 'deptNo'
      }
    })
    
    await queryInterface.addConstraint('DeptManager', {
      fields: ['departmentsId'],
      type: 'foreign key',
      name: 'DeptManager_departmentsId_fkey',
      references: {
        table: 'Department',
        field: 'deptNo'
      }
    })
    
    await queryInterface.addConstraint('DeptManager', {
      fields: ['managerId'],
      type: 'foreign key',
      name: 'DeptManager_managerId_fkey',
      references: {
        table: 'Employee',
        field: 'empNo'
      }
    })
    
    await queryInterface.addConstraint('Title', {
      fields: ['empNo'],
      type: 'foreign key',
      name: 'Title_empNo_fkey',
      references: {
        table: 'Employee',
        field: 'empNo'
      }
    })
    
    await queryInterface.addConstraint('Salary', {
      fields: ['empNo'],
      type: 'foreign key',
      name: 'Salary_empNo_fkey',
      references: {
        table: 'Employee',
        field: 'empNo'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeConstraint('DeptEmp', 'DeptEmp_empNo_fkey')
    await queryInterface.removeConstraint('DeptEmp', 'DeptEmp_deptNo_fkey')
    await queryInterface.removeConstraint('DeptEmp', 'DeptEmp_departmentsId_fkey')
    await queryInterface.removeConstraint('DeptEmp', 'DeptEmp_employeeId_fkey')
    await queryInterface.removeConstraint('DeptManager', 'DeptManager_empNo_fkey')
    await queryInterface.removeConstraint('DeptManager', 'DeptManager_deptNo_fkey')
    await queryInterface.removeConstraint('DeptManager', 'DeptManager_departmentsId_fkey')
    await queryInterface.removeConstraint('DeptManager', 'DeptManager_managerId_fkey')
    await queryInterface.removeConstraint('Title', 'Title_empNo_fkey')
    await queryInterface.removeConstraint('Salary', 'Salary_empNo_fkey')
  }
};

/****************************************
 * employee-dataset/models/Department.ts
 ****************************************/

import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { DeptEmp, DeptEmpId } from './DeptEmp'
import type { DeptManager, DeptManagerId } from './DeptManager'
import type { Employee, EmployeeId } from './Employee'

export interface DepartmentAttributes {
  deptNo: string
  deptName: string
}

export type DepartmentPk = 'deptNo'
export type DepartmentId = DepartmentAttributes[DepartmentPk]
export type DepartmentCreationAttributes = Optional<DepartmentAttributes, DepartmentPk>

export class Department
  extends Model<DepartmentAttributes, DepartmentCreationAttributes>
  implements DepartmentAttributes {
  public readonly deptNo!: string
  public deptName!: string

  // Department belongsToMany Employee (as Employee)
  public readonly employees?: Employee[]
  public getEmployees!: Sequelize.BelongsToManyGetAssociationsMixin<Employee>
  public setEmployees!: Sequelize.BelongsToManySetAssociationsMixin<Employee, EmployeeId>
  public addEmployee!: Sequelize.BelongsToManyAddAssociationMixin<Employee, EmployeeId>
  public addEmployees!: Sequelize.BelongsToManyAddAssociationsMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToManyCreateAssociationMixin<Employee>
  public removeEmployee!: Sequelize.BelongsToManyRemoveAssociationMixin<Employee, EmployeeId>
  public removeEmployees!: Sequelize.BelongsToManyRemoveAssociationsMixin<Employee, EmployeeId>
  public hasEmployee!: Sequelize.BelongsToManyHasAssociationMixin<Employee, EmployeeId>
  public hasEmployees!: Sequelize.BelongsToManyHasAssociationsMixin<Employee, EmployeeId>
  public countEmployees!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Department belongsToMany Employee (as Manager)
  public readonly managers?: Employee[]
  public getManagers!: Sequelize.BelongsToManyGetAssociationsMixin<Employee>
  public setManagers!: Sequelize.BelongsToManySetAssociationsMixin<Employee, EmployeeId>
  public addManager!: Sequelize.BelongsToManyAddAssociationMixin<Employee, EmployeeId>
  public addManagers!: Sequelize.BelongsToManyAddAssociationsMixin<Employee, EmployeeId>
  public createManager!: Sequelize.BelongsToManyCreateAssociationMixin<Employee>
  public removeManager!: Sequelize.BelongsToManyRemoveAssociationMixin<Employee, EmployeeId>
  public removeManagers!: Sequelize.BelongsToManyRemoveAssociationsMixin<Employee, EmployeeId>
  public hasManager!: Sequelize.BelongsToManyHasAssociationMixin<Employee, EmployeeId>
  public hasManagers!: Sequelize.BelongsToManyHasAssociationsMixin<Employee, EmployeeId>
  public countManagers!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Department hasMany DeptEmp
  public readonly DeptEmps?: DeptEmp[]
  public getDeptEmps!: Sequelize.HasManyGetAssociationsMixin<DeptEmp>
  public setDeptEmps!: Sequelize.HasManySetAssociationsMixin<DeptEmp, DeptEmpId>
  public addDeptEmp!: Sequelize.HasManyAddAssociationMixin<DeptEmp, DeptEmpId>
  public addDeptEmps!: Sequelize.HasManyAddAssociationsMixin<DeptEmp, DeptEmpId>
  public createDeptEmp!: Sequelize.HasManyCreateAssociationMixin<DeptEmp>
  public removeDeptEmp!: Sequelize.HasManyRemoveAssociationMixin<DeptEmp, DeptEmpId>
  public removeDeptEmps!: Sequelize.HasManyRemoveAssociationsMixin<DeptEmp, DeptEmpId>
  public hasDeptEmp!: Sequelize.HasManyHasAssociationMixin<DeptEmp, DeptEmpId>
  public hasDeptEmps!: Sequelize.HasManyHasAssociationsMixin<DeptEmp, DeptEmpId>
  public countDeptEmps!: Sequelize.HasManyCountAssociationsMixin
  
  // Department hasMany DeptManager
  public readonly DeptManagers?: DeptManager[]
  public getDeptManagers!: Sequelize.HasManyGetAssociationsMixin<DeptManager>
  public setDeptManagers!: Sequelize.HasManySetAssociationsMixin<DeptManager, DeptManagerId>
  public addDeptManager!: Sequelize.HasManyAddAssociationMixin<DeptManager, DeptManagerId>
  public addDeptManagers!: Sequelize.HasManyAddAssociationsMixin<DeptManager, DeptManagerId>
  public createDeptManager!: Sequelize.HasManyCreateAssociationMixin<DeptManager>
  public removeDeptManager!: Sequelize.HasManyRemoveAssociationMixin<DeptManager, DeptManagerId>
  public removeDeptManagers!: Sequelize.HasManyRemoveAssociationsMixin<DeptManager, DeptManagerId>
  public hasDeptManager!: Sequelize.HasManyHasAssociationMixin<DeptManager, DeptManagerId>
  public hasDeptManagers!: Sequelize.HasManyHasAssociationsMixin<DeptManager, DeptManagerId>
  public countDeptManagers!: Sequelize.HasManyCountAssociationsMixin
  
  public static associations: {
    employees: Association<Department, Employee>,
    managers: Association<Department, Employee>,
    DeptEmps: Association<Department, DeptEmp>,
    DeptManagers: Association<Department, DeptManager>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Department {
    Department.init({
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      deptName: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Department
  }
}


/****************************************
 * employee-dataset/models/DeptEmp.ts
 ****************************************/

import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Employee, EmployeeId } from './Employee'

export interface DeptEmpAttributes {
  empNo: number
  deptNo: string
  fromDate: string
  toDate: string
}

export type DeptEmpPk = 'empNo' | 'deptNo'
export type DeptEmpId = DeptEmpAttributes[DeptEmpPk]
export type DeptEmpCreationAttributes = Optional<DeptEmpAttributes, DeptEmpPk>

export class DeptEmp
  extends Model<DeptEmpAttributes, DeptEmpCreationAttributes>
  implements DeptEmpAttributes {
  public readonly empNo!: number
  public readonly deptNo!: string
  public fromDate!: string
  public toDate!: string

  // DeptEmp belongsTo Employee
  public readonly Employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  // DeptEmp belongsTo Department
  public readonly Department?: Department
  public getDepartment!: Sequelize.BelongsToGetAssociationMixin<Department>
  public setDepartment!: Sequelize.BelongsToSetAssociationMixin<Department, DepartmentId>
  public createDepartment!: Sequelize.BelongsToCreateAssociationMixin<Department>
  
  public static associations: {
    Employee: Association<DeptEmp, Employee>,
    Department: Association<DeptEmp, Department>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof DeptEmp {
    DeptEmp.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return DeptEmp
  }
}


/****************************************
 * employee-dataset/models/DeptManager.ts
 ****************************************/

import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Employee, EmployeeId } from './Employee'

export interface DeptManagerAttributes {
  empNo: number
  deptNo: string
  fromDate: string
  toDate: string
}

export type DeptManagerPk = 'empNo' | 'deptNo'
export type DeptManagerId = DeptManagerAttributes[DeptManagerPk]
export type DeptManagerCreationAttributes = Optional<DeptManagerAttributes, DeptManagerPk>

export class DeptManager
  extends Model<DeptManagerAttributes, DeptManagerCreationAttributes>
  implements DeptManagerAttributes {
  public readonly empNo!: number
  public readonly deptNo!: string
  public fromDate!: string
  public toDate!: string

  // DeptManager belongsTo Employee
  public readonly Employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  // DeptManager belongsTo Department
  public readonly Department?: Department
  public getDepartment!: Sequelize.BelongsToGetAssociationMixin<Department>
  public setDepartment!: Sequelize.BelongsToSetAssociationMixin<Department, DepartmentId>
  public createDepartment!: Sequelize.BelongsToCreateAssociationMixin<Department>
  
  public static associations: {
    Employee: Association<DeptManager, Employee>,
    Department: Association<DeptManager, Department>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof DeptManager {
    DeptManager.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return DeptManager
  }
}


/****************************************
 * employee-dataset/models/Employee.ts
 ****************************************/

import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Salary, SalaryId } from './Salary'
import type { Title, TitleId } from './Title'

export interface EmployeeAttributes {
  empNo: number
  birthDate: string
  firstName: string
  lastName: string
  gender: 'M' | 'F' | 'O'
  hireDate: string
}

export type EmployeePk = 'empNo'
export type EmployeeId = EmployeeAttributes[EmployeePk]
export type EmployeeCreationAttributes = Optional<EmployeeAttributes, EmployeePk>

export class Employee
  extends Model<EmployeeAttributes, EmployeeCreationAttributes>
  implements EmployeeAttributes {
  public readonly empNo!: number
  public birthDate!: string
  public firstName!: string
  public lastName!: string
  public gender!: 'M' | 'F' | 'O'
  public hireDate!: string

  // Employee hasMany Salary
  public readonly Salaries?: Salary[]
  public getSalaries!: Sequelize.HasManyGetAssociationsMixin<Salary>
  public setSalaries!: Sequelize.HasManySetAssociationsMixin<Salary, SalaryId>
  public addSalary!: Sequelize.HasManyAddAssociationMixin<Salary, SalaryId>
  public addSalaries!: Sequelize.HasManyAddAssociationsMixin<Salary, SalaryId>
  public createSalary!: Sequelize.HasManyCreateAssociationMixin<Salary>
  public removeSalary!: Sequelize.HasManyRemoveAssociationMixin<Salary, SalaryId>
  public removeSalaries!: Sequelize.HasManyRemoveAssociationsMixin<Salary, SalaryId>
  public hasSalary!: Sequelize.HasManyHasAssociationMixin<Salary, SalaryId>
  public hasSalaries!: Sequelize.HasManyHasAssociationsMixin<Salary, SalaryId>
  public countSalaries!: Sequelize.HasManyCountAssociationsMixin
  
  // Employee hasMany Title
  public readonly Titles?: Title[]
  public getTitles!: Sequelize.HasManyGetAssociationsMixin<Title>
  public setTitles!: Sequelize.HasManySetAssociationsMixin<Title, TitleId>
  public addTitle!: Sequelize.HasManyAddAssociationMixin<Title, TitleId>
  public addTitles!: Sequelize.HasManyAddAssociationsMixin<Title, TitleId>
  public createTitle!: Sequelize.HasManyCreateAssociationMixin<Title>
  public removeTitle!: Sequelize.HasManyRemoveAssociationMixin<Title, TitleId>
  public removeTitles!: Sequelize.HasManyRemoveAssociationsMixin<Title, TitleId>
  public hasTitle!: Sequelize.HasManyHasAssociationMixin<Title, TitleId>
  public hasTitles!: Sequelize.HasManyHasAssociationsMixin<Title, TitleId>
  public countTitles!: Sequelize.HasManyCountAssociationsMixin
  
  // Employee belongsToMany Department (as EmployingDepartment)
  public readonly employingDepartments?: Department[]
  public getEmployingDepartments!: Sequelize.BelongsToManyGetAssociationsMixin<Department>
  public setEmployingDepartments!: Sequelize.BelongsToManySetAssociationsMixin<Department, DepartmentId>
  public addEmployingDepartment!: Sequelize.BelongsToManyAddAssociationMixin<Department, DepartmentId>
  public addEmployingDepartments!: Sequelize.BelongsToManyAddAssociationsMixin<Department, DepartmentId>
  public createEmployingDepartment!: Sequelize.BelongsToManyCreateAssociationMixin<Department>
  public removeEmployingDepartment!: Sequelize.BelongsToManyRemoveAssociationMixin<Department, DepartmentId>
  public removeEmployingDepartments!: Sequelize.BelongsToManyRemoveAssociationsMixin<Department, DepartmentId>
  public hasEmployingDepartment!: Sequelize.BelongsToManyHasAssociationMixin<Department, DepartmentId>
  public hasEmployingDepartments!: Sequelize.BelongsToManyHasAssociationsMixin<Department, DepartmentId>
  public countEmployingDepartments!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Employee belongsToMany Department (as ManagedDepartment)
  public readonly managedDepartments?: Department[]
  public getManagedDepartments!: Sequelize.BelongsToManyGetAssociationsMixin<Department>
  public setManagedDepartments!: Sequelize.BelongsToManySetAssociationsMixin<Department, DepartmentId>
  public addManagedDepartment!: Sequelize.BelongsToManyAddAssociationMixin<Department, DepartmentId>
  public addManagedDepartments!: Sequelize.BelongsToManyAddAssociationsMixin<Department, DepartmentId>
  public createManagedDepartment!: Sequelize.BelongsToManyCreateAssociationMixin<Department>
  public removeManagedDepartment!: Sequelize.BelongsToManyRemoveAssociationMixin<Department, DepartmentId>
  public removeManagedDepartments!: Sequelize.BelongsToManyRemoveAssociationsMixin<Department, DepartmentId>
  public hasManagedDepartment!: Sequelize.BelongsToManyHasAssociationMixin<Department, DepartmentId>
  public hasManagedDepartments!: Sequelize.BelongsToManyHasAssociationsMixin<Department, DepartmentId>
  public countManagedDepartments!: Sequelize.BelongsToManyCountAssociationsMixin
  
  public static associations: {
    Salaries: Association<Employee, Salary>,
    Titles: Association<Employee, Title>,
    employingDepartments: Association<Employee, Department>,
    managedDepartments: Association<Employee, Department>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Employee {
    Employee.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      birthDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      gender: {
        type: DataTypes.ENUM('M', 'F', 'O'),
        allowNull: false
      },
      hireDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Employee
  }
}


/****************************************
 * employee-dataset/models/index.ts
 ****************************************/

import type { Sequelize, Model } from 'sequelize'
import { Employee } from './Employee'
import type { EmployeeAttributes, EmployeeCreationAttributes } from './Employee'
import { Department } from './Department'
import type { DepartmentAttributes, DepartmentCreationAttributes } from './Department'
import { DeptEmp } from './DeptEmp'
import type { DeptEmpAttributes, DeptEmpCreationAttributes } from './DeptEmp'
import { DeptManager } from './DeptManager'
import type { DeptManagerAttributes, DeptManagerCreationAttributes } from './DeptManager'
import { Title } from './Title'
import type { TitleAttributes, TitleCreationAttributes } from './Title'
import { Salary } from './Salary'
import type { SalaryAttributes, SalaryCreationAttributes } from './Salary'

export {
  Employee,
  Department,
  DeptEmp,
  DeptManager,
  Title,
  Salary
}

export type {
  EmployeeAttributes,
  EmployeeCreationAttributes,
  DepartmentAttributes,
  DepartmentCreationAttributes,
  DeptEmpAttributes,
  DeptEmpCreationAttributes,
  DeptManagerAttributes,
  DeptManagerCreationAttributes,
  TitleAttributes,
  TitleCreationAttributes,
  SalaryAttributes,
  SalaryCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Employee.initModel(sequelize)
  Department.initModel(sequelize)
  DeptEmp.initModel(sequelize)
  DeptManager.initModel(sequelize)
  Title.initModel(sequelize)
  Salary.initModel(sequelize)

  Employee.hasMany(Salary, {
    foreignKey: 'empNo'
  })
  Employee.hasMany(Title, {
    foreignKey: 'empNo'
  })
  Employee.belongsToMany(Department, {
    as: 'employingDepartments',
    through: DeptEmp,
    foreignKey: 'empNo',
    otherKey: 'deptNo',
    onDelete: 'CASCADE'
  })
  Employee.belongsToMany(Department, {
    as: 'managedDepartments',
    through: DeptManager,
    foreignKey: 'empNo',
    otherKey: 'deptNo',
    onDelete: 'CASCADE'
  })
  Department.belongsToMany(Employee, {
    as: 'employees',
    through: DeptEmp,
    foreignKey: 'departmentsId',
    otherKey: 'employeeId',
    onDelete: 'CASCADE'
  })
  Department.belongsToMany(Employee, {
    as: 'managers',
    through: DeptManager,
    foreignKey: 'departmentsId',
    otherKey: 'managerId',
    onDelete: 'CASCADE'
  })
  Department.hasMany(DeptEmp, {
    foreignKey: 'deptNo'
  })
  Department.hasMany(DeptManager, {
    foreignKey: 'deptNo'
  })
  DeptEmp.belongsTo(Employee, {
    foreignKey: 'empNo'
  })
  DeptEmp.belongsTo(Department, {
    foreignKey: 'deptNo'
  })
  DeptManager.belongsTo(Employee, {
    foreignKey: 'empNo'
  })
  DeptManager.belongsTo(Department, {
    foreignKey: 'deptNo'
  })
  Title.belongsTo(Employee, {
    foreignKey: 'empNo'
  })
  Salary.belongsTo(Employee, {
    foreignKey: 'empNo'
  })

  return {
    Employee,
    Department,
    DeptEmp,
    DeptManager,
    Title,
    Salary
  }
}


/****************************************
 * employee-dataset/models/Salary.ts
 ****************************************/

import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Employee, EmployeeId } from './Employee'

export interface SalaryAttributes {
  empNo: number
  salary: number
  fromDate: string
  toDate?: string
}

export type SalaryPk = 'empNo' | 'fromDate'
export type SalaryId = SalaryAttributes[SalaryPk]
export type SalaryCreationAttributes = Optional<SalaryAttributes, SalaryPk>

export class Salary
  extends Model<SalaryAttributes, SalaryCreationAttributes>
  implements SalaryAttributes {
  public readonly empNo!: number
  public salary!: number
  public readonly fromDate!: string
  public toDate?: string

  // Salary belongsTo Employee
  public readonly Employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  public static associations: {
    Employee: Association<Salary, Employee>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Salary {
    Salary.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      salary: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY
      }
    }, {
      sequelize
    })
    
    return Salary
  }
}


/****************************************
 * employee-dataset/models/Title.ts
 ****************************************/

import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Employee, EmployeeId } from './Employee'

export interface TitleAttributes {
  empNo: number
  title: string
  fromDate: string
  toDate: string
}

export type TitlePk = 'empNo' | 'fromDate'
export type TitleId = TitleAttributes[TitlePk]
export type TitleCreationAttributes = Optional<TitleAttributes, TitlePk>

export class Title
  extends Model<TitleAttributes, TitleCreationAttributes>
  implements TitleAttributes {
  public readonly empNo!: number
  public title!: string
  public readonly fromDate!: string
  public toDate!: string

  // Title belongsTo Employee
  public readonly Employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  public static associations: {
    Employee: Association<Title, Employee>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Title {
    Title.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Title
  }
}


`;
